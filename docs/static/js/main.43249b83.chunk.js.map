{"version":3,"sources":["Components/AddCategory.js","helpers/getGifs.js","Components/GifGridItem.js","Components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","category","type","value","onChange","target","getGifs","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","console","log","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"wKA4BeA,EAzBK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cACrB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAaA,OACE,sBAAMC,SARa,SAACC,GACpBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAACS,GAAD,OAAeP,GAAf,mBAA8BO,OAC5CN,EAAc,MAIhB,SACE,uBAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAbhB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,a,+BCWZG,EAlBF,uCAAG,WAAOL,GAAP,uBAAAM,EAAA,6DACRC,EADQ,iDACwCC,UACpDR,GAFY,8DAIKS,MAAMF,GAJX,cAIRG,EAJQ,gBAKSA,EAAKC,OALd,uBAKNC,EALM,EAKNA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAXxB,kBAePM,GAfO,4CAAH,sDCaEO,EAVK,SAAC,GAAwB,IAAtBJ,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAEhC,OADAc,QAAQC,IAAIN,EAAIC,EAAOV,GAErB,qBAAKgB,UAAU,yBAAf,SACE,qBAAKC,IAAKjB,EAAKkB,IAAKR,OCcXS,EAjBC,SAAC,GAAkB,IAAhB1B,EAAe,EAAfA,SACjB,ECF0B,SAACA,GAC3B,MAA0BR,mBAAS,CACjCoB,KAAM,GACNe,SAAS,IAFX,mBAAOC,EAAP,KAAcC,EAAd,KAcA,OATAC,qBAAU,WACRzB,EAAQL,GAAU+B,MAAK,SAAChB,GAAD,OACrBc,EAAS,CACPjB,KAAMG,EACNY,SAAS,SAGZ,CAAC3B,IAEG4B,EDb2BI,CAAahC,GAAjCkB,EAAd,EAAQN,KAAce,EAAtB,EAAsBA,QAEtB,OACE,qCACE,oBAAIJ,UAAU,oBAAd,SAAmCvB,IAClC2B,GAAW,mBAAGJ,UAAU,kBAAb,qBAEZ,qBAAKA,UAAU,YAAf,SACGL,EAAOJ,KAAI,SAACC,GAAD,OACV,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aEajBiB,EAvBM,WAEnB,MAAoCzC,mBAAS,CAAC,gBAA9C,mBAAO0C,EAAP,KAAmB3C,EAAnB,KAMA,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BACG2C,EAAWpB,KAAI,SAACd,GAAD,OACd,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,YCfxBmC,IAASC,OAAO,cAAC,EAAD,IAAkBC,SAASC,eAAe,U","file":"static/js/main.43249b83.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst AddCategory = ({ setCategories }) => {\n  const [inputValue, setInputValue] = useState(\"\");\n\n  const handleInputChange = (e) => {\n    setInputValue(e.target.value);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (inputValue.trim().length > 2) {\n      setCategories((category) => [inputValue, ...category]);\n      setInputValue(\"\");\n    }\n  };\n  return (\n    <form onSubmit={handleSubmit}>\n      <input type=\"text\" value={inputValue} onChange={handleInputChange} />\n    </form>\n  );\n};\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired,\n};\n\nexport default AddCategory;\n","const getGifs = async (category) => {\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\n    category\n  )}&api_key=4j8n4FOpyGwenjgxSZkdN48mjx4Mfvlh&limit=5`;\n  const resp = await fetch(url);\n  const { data } = await resp.json();\n\n  const gifs = data.map((img) => {\n    return {\n      id: img.id,\n      title: img.title,\n      url: img.images?.downsized_medium.url,\n    };\n  });\n\n  return gifs;\n};\n\nexport default getGifs;\n","import React from \"react\";\nimport \"../index.css\";\n\nconst GifGridItem = ({ id, title, url }) => {\n  console.log(id, title, url);\n  return (\n    <div className=\"card animate__bounceIn\">\n      <img src={url} alt={title} />\n      {/*  <p>{title}</p> */}\n    </div>\n  );\n};\n\nexport default GifGridItem;\n","import React /* useState, useEffect  */ from \"react\";\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\nimport GifGridItem from \"./GifGridItem\";\n\nconst GifGrid = ({ category }) => {\n  const { data: images, loading } = useFetchGifs(category);\n\n  return (\n    <>\n      <h3 className=\"animate__bounceIn\">{category}</h3>\n      {loading && <p className=\"animate__wobble\">Loading</p>}\n\n      <div className=\"card-grid\">\n        {images.map((img) => (\n          <GifGridItem key={img.id} {...img} />\n        ))}\n      </div>\n    </>\n  );\n};\n\nexport default GifGrid;\n","import { useState, useEffect } from \"react\";\nimport getGifs from \"../helpers/getGifs\";\n\nexport const useFetchGifs = (category) => {\n  const [state, setstate] = useState({\n    data: [],\n    loading: true,\n  });\n\n  useEffect(() => {\n    getGifs(category).then((img) =>\n      setstate({\n        data: img,\n        loading: false,\n      })\n    );\n  }, [category]);\n\n  return state;\n};\n","import React, { useState } from \"react\";\nimport AddCategory from \"./Components/AddCategory\";\nimport GifGrid from \"./Components/GifGrid\";\n\nconst GifExpertApp = () => {\n  /* const categories = [\"One Punch\", \"Samurai X\", \"Dragon Ball\"]; */\n  const [categories, setCategories] = useState([\"Dragon Ball\"]);\n\n  /*  const handleAdd = () => {\n    setCategories([...categories, \"Frozen\"]);\n  }; */\n\n  return (\n    <>\n      <h2>Busca Tu Gif</h2>\n      <AddCategory setCategories={setCategories} />\n      <hr />\n\n      <ol>\n        {categories.map((category) => (\n          <GifGrid key={category} category={category} />\n        ))}\n      </ol>\n    </>\n  );\n};\n\nexport default GifExpertApp;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport GifExpertApp from \"./GifExpertApp\";\n\nReactDOM.render(<GifExpertApp />, document.getElementById(\"root\"));\n"],"sourceRoot":""}